{"version":3,"sources":["../yjs/node_modules/browserify/node_modules/browser-pack/_prelude.js","src/Memory.js","y-memory.js","src/RedBlackTree.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","extend","Y","Transaction","_Y$Transaction","store","this","_this","getPrototypeOf","ss","os","ds","Store","utils","RBTree","BufferedStore","createSmallLookupBuffer","Database","_Y$AbstractDatabase","y","opts","_this2","_createClass","key","requestTransaction","regeneratorRuntime","mark","_callee","wrap","_context","prev","next","console","log","connector","userId","t0","delegateYield","getStateSet","t2","t1","logTable","gc1","gc2","warn","JSON","stringify","listenersById","listenersByIdExecuteNow","transactionInProgress","stop","makeGen","gen","res","done","getNextRequest","destroy","_context2","_get","AbstractDatabase","defineProperties","target","props","descriptor","defineProperty","protoProps","staticProps","get","object","property","receiver","Function","desc","getOwnPropertyDescriptor","undefined","parent","getter","./RedBlackTree.js",2,"_typeof","obj","Symbol","N","val","color","_left","_right","_parent","id","tree","newParent","right","newRight","left","root","p","newLeft","set","findNext","findWithLowerBound","abrupt","findPrev","findWithUpperBound","from","smaller","to","_context3","findNodeWithLowerBound","_context4","findNodeWithUpperBound","iterate","_context5","findSmallestNode","compareIds","filter","_context7","o_","_context6","push","table","find","_context8","findNode","Array","_delete","d","isFakeChild","child","_context9","blacken","isBlack","isRed","_fixDelete","node","sibling","redden","rotateLeft","rotateRight","put","v","_context10","_fixInsert","uncle","getUncle","grandparent","flush","_context11"],"mappings":"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","file":"y-memory.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* global Y */\n'use strict'\n\nfunction extend (Y) {\n  require('./RedBlackTree.js')(Y)\n  class Transaction extends Y.Transaction {\n    constructor (store) {\n      super(store)\n      this.store = store\n      this.ss = store.ss\n      this.os = store.os\n      this.ds = store.ds\n    }\n  }\n  var Store = Y.utils.RBTree\n  var BufferedStore = Y.utils.createSmallLookupBuffer(Store)\n\n  class Database extends Y.AbstractDatabase {\n    constructor (y, opts) {\n      super(y, opts)\n      this.os = new BufferedStore()\n      this.ds = new Store()\n      this.ss = new BufferedStore()\n    }\n    logTable () {\n      var self = this\n      self.requestTransaction(function * () {\n        console.log('User: ', this.store.y.connector.userId, \"==============================\") // eslint-disable-line\n        console.log(\"State Set (SS):\", yield* this.getStateSet()) // eslint-disable-line\n        console.log(\"Operation Store (OS):\") // eslint-disable-line\n        yield* this.os.logTable() // eslint-disable-line\n        console.log(\"Deletion Store (DS):\") //eslint-disable-line\n        yield* this.ds.logTable() // eslint-disable-line\n        if (this.store.gc1.length > 0 || this.store.gc2.length > 0) {\n          console.warn('GC1|2 not empty!', this.store.gc1, this.store.gc2)\n        }\n        if (JSON.stringify(this.store.listenersById) !== '{}') {\n          console.warn('listenersById not empty!')\n        }\n        if (JSON.stringify(this.store.listenersByIdExecuteNow) !== '[]') {\n          console.warn('listenersByIdExecuteNow not empty!')\n        }\n        if (this.store.transactionInProgress) {\n          console.warn('Transaction still in progress!')\n        }\n      }, true)\n    }\n    transact (makeGen) {\n      var t = new Transaction(this)\n      while (makeGen !== null) {\n        var gen = makeGen.call(t)\n        var res = gen.next()\n        while (!res.done) {\n          res = gen.next(res.value)\n        }\n        makeGen = this.getNextRequest()\n      }\n    }\n    * destroy () {\n      yield* super.destroy()\n      delete this.os\n      delete this.ss\n      delete this.ds\n    }\n  }\n  Y.extend('memory', Database)\n}\n\nmodule.exports = extend\nif (typeof Y !== 'undefined') {\n  extend(Y)\n}\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/* global Y */\n'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction extend(Y) {\n  require('./RedBlackTree.js')(Y);\n\n  var Transaction = (function (_Y$Transaction) {\n    _inherits(Transaction, _Y$Transaction);\n\n    function Transaction(store) {\n      _classCallCheck(this, Transaction);\n\n      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Transaction).call(this, store));\n\n      _this.store = store;\n      _this.ss = store.ss;\n      _this.os = store.os;\n      _this.ds = store.ds;\n      return _this;\n    }\n\n    return Transaction;\n  })(Y.Transaction);\n\n  var Store = Y.utils.RBTree;\n  var BufferedStore = Y.utils.createSmallLookupBuffer(Store);\n\n  var Database = (function (_Y$AbstractDatabase) {\n    _inherits(Database, _Y$AbstractDatabase);\n\n    function Database(y, opts) {\n      _classCallCheck(this, Database);\n\n      var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(Database).call(this, y, opts));\n\n      _this2.os = new BufferedStore();\n      _this2.ds = new Store();\n      _this2.ss = new BufferedStore();\n      return _this2;\n    }\n\n    _createClass(Database, [{\n      key: 'logTable',\n      value: function logTable() {\n        var self = this;\n        self.requestTransaction(regeneratorRuntime.mark(function _callee() {\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  console.log('User: ', this.store.y.connector.userId, \"==============================\"); // eslint-disable-line\n                  _context.t0 = console;\n                  return _context.delegateYield(this.getStateSet(), 't1', 3);\n\n                case 3:\n                  _context.t2 = _context.t1;\n\n                  _context.t0.log.call(_context.t0, \"State Set (SS):\", _context.t2);\n\n                  // eslint-disable-line\n                  console.log(\"Operation Store (OS):\"); // eslint-disable-line\n                  return _context.delegateYield(this.os.logTable(), 't3', 7);\n\n                case 7:\n                  // eslint-disable-line\n                  console.log(\"Deletion Store (DS):\"); //eslint-disable-line\n                  return _context.delegateYield(this.ds.logTable(), 't4', 9);\n\n                case 9:\n                  // eslint-disable-line\n                  if (this.store.gc1.length > 0 || this.store.gc2.length > 0) {\n                    console.warn('GC1|2 not empty!', this.store.gc1, this.store.gc2);\n                  }\n                  if (JSON.stringify(this.store.listenersById) !== '{}') {\n                    console.warn('listenersById not empty!');\n                  }\n                  if (JSON.stringify(this.store.listenersByIdExecuteNow) !== '[]') {\n                    console.warn('listenersByIdExecuteNow not empty!');\n                  }\n                  if (this.store.transactionInProgress) {\n                    console.warn('Transaction still in progress!');\n                  }\n\n                case 13:\n                case 'end':\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }), true);\n      }\n    }, {\n      key: 'transact',\n      value: function transact(makeGen) {\n        var t = new Transaction(this);\n        while (makeGen !== null) {\n          var gen = makeGen.call(t);\n          var res = gen.next();\n          while (!res.done) {\n            res = gen.next(res.value);\n          }\n          makeGen = this.getNextRequest();\n        }\n      }\n    }, {\n      key: 'destroy',\n      value: regeneratorRuntime.mark(function destroy() {\n        return regeneratorRuntime.wrap(function destroy$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.delegateYield(_get(Object.getPrototypeOf(Database.prototype), 'destroy', this).call(this), 't0', 1);\n\n              case 1:\n                delete this.os;\n                delete this.ss;\n                delete this.ds;\n\n              case 4:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, destroy, this);\n      })\n    }]);\n\n    return Database;\n  })(Y.AbstractDatabase);\n\n  Y.extend('memory', Database);\n}\n\nmodule.exports = extend;\nif (typeof Y !== 'undefined') {\n  extend(Y);\n}\n\n},{\"./RedBlackTree.js\":2}],2:[function(require,module,exports){\n'use strict';\n\n/*\n  This file contains a not so fancy implemantion of a Red Black Tree.\n*/\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _typeof(obj) { return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nmodule.exports = function (Y) {\n  var N = (function () {\n    // A created node is always red!\n\n    function N(val) {\n      _classCallCheck(this, N);\n\n      this.val = val;\n      this.color = true;\n      this._left = null;\n      this._right = null;\n      this._parent = null;\n      if (val.id === null) {\n        throw new Error('You must define id!');\n      }\n    }\n\n    _createClass(N, [{\n      key: 'isRed',\n      value: function isRed() {\n        return this.color;\n      }\n    }, {\n      key: 'isBlack',\n      value: function isBlack() {\n        return !this.color;\n      }\n    }, {\n      key: 'redden',\n      value: function redden() {\n        this.color = true;return this;\n      }\n    }, {\n      key: 'blacken',\n      value: function blacken() {\n        this.color = false;return this;\n      }\n    }, {\n      key: 'rotateLeft',\n      value: function rotateLeft(tree) {\n        var parent = this.parent;\n        var newParent = this.right;\n        var newRight = this.right.left;\n        newParent.left = this;\n        this.right = newRight;\n        if (parent === null) {\n          tree.root = newParent;\n          newParent._parent = null;\n        } else if (parent.left === this) {\n          parent.left = newParent;\n        } else if (parent.right === this) {\n          parent.right = newParent;\n        } else {\n          throw new Error('The elements are wrongly connected!');\n        }\n      }\n    }, {\n      key: 'next',\n      value: function next() {\n        if (this.right !== null) {\n          // search the most left node in the right tree\n          var o = this.right;\n          while (o.left !== null) {\n            o = o.left;\n          }\n          return o;\n        } else {\n          var p = this;\n          while (p.parent !== null && p !== p.parent.left) {\n            p = p.parent;\n          }\n          return p.parent;\n        }\n      }\n    }, {\n      key: 'prev',\n      value: function prev() {\n        if (this.left !== null) {\n          // search the most right node in the left tree\n          var o = this.left;\n          while (o.right !== null) {\n            o = o.right;\n          }\n          return o;\n        } else {\n          var p = this;\n          while (p.parent !== null && p !== p.parent.right) {\n            p = p.parent;\n          }\n          return p.parent;\n        }\n      }\n    }, {\n      key: 'rotateRight',\n      value: function rotateRight(tree) {\n        var parent = this.parent;\n        var newParent = this.left;\n        var newLeft = this.left.right;\n        newParent.right = this;\n        this.left = newLeft;\n        if (parent === null) {\n          tree.root = newParent;\n          newParent._parent = null;\n        } else if (parent.left === this) {\n          parent.left = newParent;\n        } else if (parent.right === this) {\n          parent.right = newParent;\n        } else {\n          throw new Error('The elements are wrongly connected!');\n        }\n      }\n    }, {\n      key: 'getUncle',\n      value: function getUncle() {\n        // we can assume that grandparent exists when this is called!\n        if (this.parent === this.parent.parent.left) {\n          return this.parent.parent.right;\n        } else {\n          return this.parent.parent.left;\n        }\n      }\n    }, {\n      key: 'grandparent',\n      get: function get() {\n        return this.parent.parent;\n      }\n    }, {\n      key: 'parent',\n      get: function get() {\n        return this._parent;\n      }\n    }, {\n      key: 'sibling',\n      get: function get() {\n        return this === this.parent.left ? this.parent.right : this.parent.left;\n      }\n    }, {\n      key: 'left',\n      get: function get() {\n        return this._left;\n      },\n      set: function set(n) {\n        if (n !== null) {\n          n._parent = this;\n        }\n        this._left = n;\n      }\n    }, {\n      key: 'right',\n      get: function get() {\n        return this._right;\n      },\n      set: function set(n) {\n        if (n !== null) {\n          n._parent = this;\n        }\n        this._right = n;\n      }\n    }]);\n\n    return N;\n  })();\n\n  var RBTree = (function () {\n    function RBTree() {\n      _classCallCheck(this, RBTree);\n\n      this.root = null;\n      this.length = 0;\n    }\n\n    _createClass(RBTree, [{\n      key: 'findNext',\n      value: regeneratorRuntime.mark(function findNext(id) {\n        return regeneratorRuntime.wrap(function findNext$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.delegateYield(this.findWithLowerBound([id[0], id[1] + 1]), 't0', 1);\n\n              case 1:\n                return _context.abrupt('return', _context.t0);\n\n              case 2:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, findNext, this);\n      })\n    }, {\n      key: 'findPrev',\n      value: regeneratorRuntime.mark(function findPrev(id) {\n        return regeneratorRuntime.wrap(function findPrev$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.delegateYield(this.findWithUpperBound([id[0], id[1] - 1]), 't0', 1);\n\n              case 1:\n                return _context2.abrupt('return', _context2.t0);\n\n              case 2:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, findPrev, this);\n      })\n    }, {\n      key: 'findNodeWithLowerBound',\n      value: function findNodeWithLowerBound(from) {\n        if (from === void 0) {\n          throw new Error('You must define from!');\n        }\n        var o = this.root;\n        if (o === null) {\n          return null;\n        } else {\n          while (true) {\n            if ((from === null || Y.utils.smaller(from, o.val.id)) && o.left !== null) {\n              // o is included in the bound\n              // try to find an element that is closer to the bound\n              o = o.left;\n            } else if (from !== null && Y.utils.smaller(o.val.id, from)) {\n              // o is not within the bound, maybe one of the right elements is..\n              if (o.right !== null) {\n                o = o.right;\n              } else {\n                // there is no right element. Search for the next bigger element,\n                // this should be within the bounds\n                return o.next();\n              }\n            } else {\n              return o;\n            }\n          }\n        }\n      }\n    }, {\n      key: 'findNodeWithUpperBound',\n      value: function findNodeWithUpperBound(to) {\n        if (to === void 0) {\n          throw new Error('You must define from!');\n        }\n        var o = this.root;\n        if (o === null) {\n          return null;\n        } else {\n          while (true) {\n            if ((to === null || Y.utils.smaller(o.val.id, to)) && o.right !== null) {\n              // o is included in the bound\n              // try to find an element that is closer to the bound\n              o = o.right;\n            } else if (to !== null && Y.utils.smaller(to, o.val.id)) {\n              // o is not within the bound, maybe one of the left elements is..\n              if (o.left !== null) {\n                o = o.left;\n              } else {\n                // there is no left element. Search for the prev smaller element,\n                // this should be within the bounds\n                return o.prev();\n              }\n            } else {\n              return o;\n            }\n          }\n        }\n      }\n    }, {\n      key: 'findSmallestNode',\n      value: function findSmallestNode() {\n        var o = this.root;\n        while (o != null && o.left != null) {\n          o = o.left;\n        }\n        return o;\n      }\n    }, {\n      key: 'findWithLowerBound',\n      value: regeneratorRuntime.mark(function findWithLowerBound(from) {\n        var n;\n        return regeneratorRuntime.wrap(function findWithLowerBound$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                n = this.findNodeWithLowerBound(from);\n                return _context3.abrupt('return', n == null ? null : n.val);\n\n              case 2:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, findWithLowerBound, this);\n      })\n    }, {\n      key: 'findWithUpperBound',\n      value: regeneratorRuntime.mark(function findWithUpperBound(to) {\n        var n;\n        return regeneratorRuntime.wrap(function findWithUpperBound$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                n = this.findNodeWithUpperBound(to);\n                return _context4.abrupt('return', n == null ? null : n.val);\n\n              case 2:\n              case 'end':\n                return _context4.stop();\n            }\n          }\n        }, findWithUpperBound, this);\n      })\n    }, {\n      key: 'iterate',\n      value: regeneratorRuntime.mark(function iterate(t, from, to, f) {\n        var o;\n        return regeneratorRuntime.wrap(function iterate$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (from === null) {\n                  o = this.findSmallestNode();\n                } else {\n                  o = this.findNodeWithLowerBound(from);\n                }\n\n              case 1:\n                if (!(o !== null && (to === null || Y.utils.smaller(o.val.id, to) || Y.utils.compareIds(o.val.id, to)))) {\n                  _context5.next = 6;\n                  break;\n                }\n\n                return _context5.delegateYield(f.call(t, o.val), 't0', 3);\n\n              case 3:\n                o = o.next();\n                _context5.next = 1;\n                break;\n\n              case 6:\n                return _context5.abrupt('return', true);\n\n              case 7:\n              case 'end':\n                return _context5.stop();\n            }\n          }\n        }, iterate, this);\n      })\n    }, {\n      key: 'logTable',\n      value: regeneratorRuntime.mark(function logTable(from, to, filter) {\n        var os;\n        return regeneratorRuntime.wrap(function logTable$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (filter == null) {\n                  filter = function () {\n                    return true;\n                  };\n                }\n                if (from == null) {\n                  from = null;\n                }\n                if (to == null) {\n                  to = null;\n                }\n                os = [];\n                return _context7.delegateYield(this.iterate(this, from, to, regeneratorRuntime.mark(function _callee(o) {\n                  var o_, key;\n                  return regeneratorRuntime.wrap(function _callee$(_context6) {\n                    while (1) {\n                      switch (_context6.prev = _context6.next) {\n                        case 0:\n                          if (filter(o)) {\n                            o_ = {};\n\n                            for (key in o) {\n                              if (_typeof(o[key]) === 'object') {\n                                o_[key] = JSON.stringify(o[key]);\n                              } else {\n                                o_[key] = o[key];\n                              }\n                            }\n                            os.push(o_);\n                          }\n\n                        case 1:\n                        case 'end':\n                          return _context6.stop();\n                      }\n                    }\n                  }, _callee, this);\n                })), 't0', 5);\n\n              case 5:\n                if (console.table != null) {\n                  console.table(os);\n                }\n\n              case 6:\n              case 'end':\n                return _context7.stop();\n            }\n          }\n        }, logTable, this);\n      })\n    }, {\n      key: 'find',\n      value: regeneratorRuntime.mark(function find(id) {\n        var n;\n        return regeneratorRuntime.wrap(function find$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                return _context8.abrupt('return', (n = this.findNode(id)) ? n.val : null);\n\n              case 1:\n              case 'end':\n                return _context8.stop();\n            }\n          }\n        }, find, this);\n      })\n    }, {\n      key: 'findNode',\n      value: function findNode(id) {\n        if (id == null || id.constructor !== Array) {\n          throw new Error('Expect id to be an array!');\n        }\n        var o = this.root;\n        if (o === null) {\n          return false;\n        } else {\n          while (true) {\n            if (o === null) {\n              return false;\n            }\n            if (Y.utils.smaller(id, o.val.id)) {\n              o = o.left;\n            } else if (Y.utils.smaller(o.val.id, id)) {\n              o = o.right;\n            } else {\n              return o;\n            }\n          }\n        }\n      }\n    }, {\n      key: 'delete',\n      value: regeneratorRuntime.mark(function _delete(id) {\n        var d, o, isFakeChild, child;\n        return regeneratorRuntime.wrap(function _delete$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (!(id == null || id.constructor !== Array)) {\n                  _context9.next = 2;\n                  break;\n                }\n\n                throw new Error('id is expected to be an Array!');\n\n              case 2:\n                d = this.findNode(id);\n\n                if (!(d == null)) {\n                  _context9.next = 5;\n                  break;\n                }\n\n                return _context9.abrupt('return');\n\n              case 5:\n                this.length--;\n                if (d.left !== null && d.right !== null) {\n                  // switch d with the greates element in the left subtree.\n                  // o should have at most one child.\n                  o = d.left;\n                  // find\n\n                  while (o.right !== null) {\n                    o = o.right;\n                  }\n                  // switch\n                  d.val = o.val;\n                  d = o;\n                }\n                // d has at most one child\n                // let n be the node that replaces d\n                child = d.left || d.right;\n\n                if (child === null) {\n                  isFakeChild = true;\n                  child = new N({ id: 0 });\n                  child.blacken();\n                  d.right = child;\n                } else {\n                  isFakeChild = false;\n                }\n\n                if (!(d.parent === null)) {\n                  _context9.next = 14;\n                  break;\n                }\n\n                if (!isFakeChild) {\n                  this.root = child;\n                  child.blacken();\n                  child._parent = null;\n                } else {\n                  this.root = null;\n                }\n                return _context9.abrupt('return');\n\n              case 14:\n                if (!(d.parent.left === d)) {\n                  _context9.next = 18;\n                  break;\n                }\n\n                d.parent.left = child;\n                _context9.next = 23;\n                break;\n\n              case 18:\n                if (!(d.parent.right === d)) {\n                  _context9.next = 22;\n                  break;\n                }\n\n                d.parent.right = child;\n                _context9.next = 23;\n                break;\n\n              case 22:\n                throw new Error('Impossible!');\n\n              case 23:\n                if (d.isBlack()) {\n                  if (child.isRed()) {\n                    child.blacken();\n                  } else {\n                    this._fixDelete(child);\n                  }\n                }\n                this.root.blacken();\n\n                if (!isFakeChild) {\n                  _context9.next = 35;\n                  break;\n                }\n\n                if (!(child.parent.left === child)) {\n                  _context9.next = 30;\n                  break;\n                }\n\n                child.parent.left = null;\n                _context9.next = 35;\n                break;\n\n              case 30:\n                if (!(child.parent.right === child)) {\n                  _context9.next = 34;\n                  break;\n                }\n\n                child.parent.right = null;\n                _context9.next = 35;\n                break;\n\n              case 34:\n                throw new Error('Impossible #3');\n\n              case 35:\n              case 'end':\n                return _context9.stop();\n            }\n          }\n        }, _delete, this);\n      })\n    }, {\n      key: '_fixDelete',\n      value: function _fixDelete(n) {\n        function isBlack(node) {\n          return node !== null ? node.isBlack() : true;\n        }\n        function isRed(node) {\n          return node !== null ? node.isRed() : false;\n        }\n        if (n.parent === null) {\n          // this can only be called after the first iteration of fixDelete.\n          return;\n        }\n        // d was already replaced by the child\n        // d is not the root\n        // d and child are black\n        var sibling = n.sibling;\n        if (isRed(sibling)) {\n          // make sibling the grandfather\n          n.parent.redden();\n          sibling.blacken();\n          if (n === n.parent.left) {\n            n.parent.rotateLeft(this);\n          } else if (n === n.parent.right) {\n            n.parent.rotateRight(this);\n          } else {\n            throw new Error('Impossible #2');\n          }\n          sibling = n.sibling;\n        }\n        // parent, sibling, and children of n are black\n        if (n.parent.isBlack() && sibling.isBlack() && isBlack(sibling.left) && isBlack(sibling.right)) {\n          sibling.redden();\n          this._fixDelete(n.parent);\n        } else if (n.parent.isRed() && sibling.isBlack() && isBlack(sibling.left) && isBlack(sibling.right)) {\n          sibling.redden();\n          n.parent.blacken();\n        } else {\n          if (n === n.parent.left && sibling.isBlack() && isRed(sibling.left) && isBlack(sibling.right)) {\n            sibling.redden();\n            sibling.left.blacken();\n            sibling.rotateRight(this);\n            sibling = n.sibling;\n          } else if (n === n.parent.right && sibling.isBlack() && isRed(sibling.right) && isBlack(sibling.left)) {\n            sibling.redden();\n            sibling.right.blacken();\n            sibling.rotateLeft(this);\n            sibling = n.sibling;\n          }\n          sibling.color = n.parent.color;\n          n.parent.blacken();\n          if (n === n.parent.left) {\n            sibling.right.blacken();\n            n.parent.rotateLeft(this);\n          } else {\n            sibling.left.blacken();\n            n.parent.rotateRight(this);\n          }\n        }\n      }\n    }, {\n      key: 'put',\n      value: regeneratorRuntime.mark(function put(v) {\n        var node, p;\n        return regeneratorRuntime.wrap(function put$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                if (!(v == null || v.id == null || v.id.constructor !== Array)) {\n                  _context10.next = 2;\n                  break;\n                }\n\n                throw new Error('v is expected to have an id property which is an Array!');\n\n              case 2:\n                node = new N(v);\n\n                if (!(this.root !== null)) {\n                  _context10.next = 31;\n                  break;\n                }\n\n                p = this.root; // p abbrev. parent\n\n              case 5:\n                if (!true) {\n                  _context10.next = 28;\n                  break;\n                }\n\n                if (!Y.utils.smaller(node.val.id, p.val.id)) {\n                  _context10.next = 15;\n                  break;\n                }\n\n                if (!(p.left === null)) {\n                  _context10.next = 12;\n                  break;\n                }\n\n                p.left = node;\n                return _context10.abrupt('break', 28);\n\n              case 12:\n                p = p.left;\n\n              case 13:\n                _context10.next = 26;\n                break;\n\n              case 15:\n                if (!Y.utils.smaller(p.val.id, node.val.id)) {\n                  _context10.next = 24;\n                  break;\n                }\n\n                if (!(p.right === null)) {\n                  _context10.next = 21;\n                  break;\n                }\n\n                p.right = node;\n                return _context10.abrupt('break', 28);\n\n              case 21:\n                p = p.right;\n\n              case 22:\n                _context10.next = 26;\n                break;\n\n              case 24:\n                p.val = node.val;\n                return _context10.abrupt('return', p);\n\n              case 26:\n                _context10.next = 5;\n                break;\n\n              case 28:\n                this._fixInsert(node);\n                _context10.next = 32;\n                break;\n\n              case 31:\n                this.root = node;\n\n              case 32:\n                this.length++;\n                this.root.blacken();\n                return _context10.abrupt('return', node);\n\n              case 35:\n              case 'end':\n                return _context10.stop();\n            }\n          }\n        }, put, this);\n      })\n    }, {\n      key: '_fixInsert',\n      value: function _fixInsert(n) {\n        if (n.parent === null) {\n          n.blacken();\n          return;\n        } else if (n.parent.isBlack()) {\n          return;\n        }\n        var uncle = n.getUncle();\n        if (uncle !== null && uncle.isRed()) {\n          // Note: parent: red, uncle: red\n          n.parent.blacken();\n          uncle.blacken();\n          n.grandparent.redden();\n          this._fixInsert(n.grandparent);\n        } else {\n          // Note: parent: red, uncle: black or null\n          // Now we transform the tree in such a way that\n          // either of these holds:\n          //   1) grandparent.left.isRed\n          //     and grandparent.left.left.isRed\n          //   2) grandparent.right.isRed\n          //     and grandparent.right.right.isRed\n          if (n === n.parent.right && n.parent === n.grandparent.left) {\n            n.parent.rotateLeft(this);\n            // Since we rotated and want to use the previous\n            // cases, we need to set n in such a way that\n            // n.parent.isRed again\n            n = n.left;\n          } else if (n === n.parent.left && n.parent === n.grandparent.right) {\n            n.parent.rotateRight(this);\n            // see above\n            n = n.right;\n          }\n          // Case 1) or 2) hold from here on.\n          // Now traverse grandparent, make parent a black node\n          // on the highest level which holds two red nodes.\n          n.parent.blacken();\n          n.grandparent.redden();\n          if (n === n.parent.left) {\n            // Case 1\n            n.grandparent.rotateRight(this);\n          } else {\n            // Case 2\n            n.grandparent.rotateLeft(this);\n          }\n        }\n      }\n    }, {\n      key: 'flush',\n      value: regeneratorRuntime.mark(function flush() {\n        return regeneratorRuntime.wrap(function flush$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n              case 'end':\n                return _context11.stop();\n            }\n          }\n        }, flush, this);\n      })\n    }]);\n\n    return RBTree;\n  })();\n\n  Y.utils.RBTree = RBTree;\n};\n\n},{}]},{},[1])\n\n","'use strict'\n\n/*\n  This file contains a not so fancy implemantion of a Red Black Tree.\n*/\nmodule.exports = function (Y) {\n  class N {\n    // A created node is always red!\n    constructor (val) {\n      this.val = val\n      this.color = true\n      this._left = null\n      this._right = null\n      this._parent = null\n      if (val.id === null) {\n        throw new Error('You must define id!')\n      }\n    }\n    isRed () { return this.color }\n    isBlack () { return !this.color }\n    redden () { this.color = true; return this }\n    blacken () { this.color = false; return this }\n    get grandparent () {\n      return this.parent.parent\n    }\n    get parent () {\n      return this._parent\n    }\n    get sibling () {\n      return (this === this.parent.left)\n        ? this.parent.right : this.parent.left\n    }\n    get left () {\n      return this._left\n    }\n    get right () {\n      return this._right\n    }\n    set left (n) {\n      if (n !== null) {\n        n._parent = this\n      }\n      this._left = n\n    }\n    set right (n) {\n      if (n !== null) {\n        n._parent = this\n      }\n      this._right = n\n    }\n    rotateLeft (tree) {\n      var parent = this.parent\n      var newParent = this.right\n      var newRight = this.right.left\n      newParent.left = this\n      this.right = newRight\n      if (parent === null) {\n        tree.root = newParent\n        newParent._parent = null\n      } else if (parent.left === this) {\n        parent.left = newParent\n      } else if (parent.right === this) {\n        parent.right = newParent\n      } else {\n        throw new Error('The elements are wrongly connected!')\n      }\n    }\n    next () {\n      if (this.right !== null) {\n        // search the most left node in the right tree\n        var o = this.right\n        while (o.left !== null) {\n          o = o.left\n        }\n        return o\n      } else {\n        var p = this\n        while (p.parent !== null && p !== p.parent.left) {\n          p = p.parent\n        }\n        return p.parent\n      }\n    }\n    prev () {\n      if (this.left !== null) {\n        // search the most right node in the left tree\n        var o = this.left\n        while (o.right !== null) {\n          o = o.right\n        }\n        return o\n      } else {\n        var p = this\n        while (p.parent !== null && p !== p.parent.right) {\n          p = p.parent\n        }\n        return p.parent\n      }\n    }\n    rotateRight (tree) {\n      var parent = this.parent\n      var newParent = this.left\n      var newLeft = this.left.right\n      newParent.right = this\n      this.left = newLeft\n      if (parent === null) {\n        tree.root = newParent\n        newParent._parent = null\n      } else if (parent.left === this) {\n        parent.left = newParent\n      } else if (parent.right === this) {\n        parent.right = newParent\n      } else {\n        throw new Error('The elements are wrongly connected!')\n      }\n    }\n    getUncle () {\n      // we can assume that grandparent exists when this is called!\n      if (this.parent === this.parent.parent.left) {\n        return this.parent.parent.right\n      } else {\n        return this.parent.parent.left\n      }\n    }\n  }\n\n  class RBTree {\n    constructor () {\n      this.root = null\n      this.length = 0\n    }\n    * findNext (id) {\n      return yield* this.findWithLowerBound([id[0], id[1] + 1])\n    }\n    * findPrev (id) {\n      return yield* this.findWithUpperBound([id[0], id[1] - 1])\n    }\n    findNodeWithLowerBound (from) {\n      if (from === void 0) {\n        throw new Error('You must define from!')\n      }\n      var o = this.root\n      if (o === null) {\n        return null\n      } else {\n        while (true) {\n          if ((from === null || Y.utils.smaller(from, o.val.id)) && o.left !== null) {\n            // o is included in the bound\n            // try to find an element that is closer to the bound\n            o = o.left\n          } else if (from !== null && Y.utils.smaller(o.val.id, from)) {\n            // o is not within the bound, maybe one of the right elements is..\n            if (o.right !== null) {\n              o = o.right\n            } else {\n              // there is no right element. Search for the next bigger element,\n              // this should be within the bounds\n              return o.next()\n            }\n          } else {\n            return o\n          }\n        }\n      }\n    }\n    findNodeWithUpperBound (to) {\n      if (to === void 0) {\n        throw new Error('You must define from!')\n      }\n      var o = this.root\n      if (o === null) {\n        return null\n      } else {\n        while (true) {\n          if ((to === null || Y.utils.smaller(o.val.id, to)) && o.right !== null) {\n            // o is included in the bound\n            // try to find an element that is closer to the bound\n            o = o.right\n          } else if (to !== null && Y.utils.smaller(to, o.val.id)) {\n            // o is not within the bound, maybe one of the left elements is..\n            if (o.left !== null) {\n              o = o.left\n            } else {\n              // there is no left element. Search for the prev smaller element,\n              // this should be within the bounds\n              return o.prev()\n            }\n          } else {\n            return o\n          }\n        }\n      }\n    }\n    findSmallestNode () {\n      var o = this.root\n      while (o != null && o.left != null) {\n        o = o.left\n      }\n      return o\n    }\n    * findWithLowerBound (from) {\n      var n = this.findNodeWithLowerBound(from)\n      return n == null ? null : n.val\n    }\n    * findWithUpperBound (to) {\n      var n = this.findNodeWithUpperBound(to)\n      return n == null ? null : n.val\n    }\n    * iterate (t, from, to, f) {\n      var o\n      if (from === null) {\n        o = this.findSmallestNode()\n      } else {\n        o = this.findNodeWithLowerBound(from)\n      }\n      while (o !== null && (to === null || Y.utils.smaller(o.val.id, to) || Y.utils.compareIds(o.val.id, to))) {\n        yield* f.call(t, o.val)\n        o = o.next()\n      }\n      return true\n    }\n    * logTable (from, to, filter) {\n      if (filter == null) {\n        filter = function () {\n          return true\n        }\n      }\n      if (from == null) { from = null }\n      if (to == null) { to = null }\n      var os = []\n      yield* this.iterate(this, from, to, function * (o) {\n        if (filter(o)) {\n          var o_ = {}\n          for (var key in o) {\n            if (typeof o[key] === 'object') {\n              o_[key] = JSON.stringify(o[key])\n            } else {\n              o_[key] = o[key]\n            }\n          }\n          os.push(o_)\n        }\n      })\n      if (console.table != null) {\n        console.table(os)\n      }\n    }\n    * find (id) {\n      var n\n      return (n = this.findNode(id)) ? n.val : null\n    }\n    findNode (id) {\n      if (id == null || id.constructor !== Array) {\n        throw new Error('Expect id to be an array!')\n      }\n      var o = this.root\n      if (o === null) {\n        return false\n      } else {\n        while (true) {\n          if (o === null) {\n            return false\n          }\n          if (Y.utils.smaller(id, o.val.id)) {\n            o = o.left\n          } else if (Y.utils.smaller(o.val.id, id)) {\n            o = o.right\n          } else {\n            return o\n          }\n        }\n      }\n    }\n    * delete (id) {\n      if (id == null || id.constructor !== Array) {\n        throw new Error('id is expected to be an Array!')\n      }\n      var d = this.findNode(id)\n      if (d == null) {\n        // throw new Error('Element does not exist!')\n        return\n      }\n      this.length--\n      if (d.left !== null && d.right !== null) {\n        // switch d with the greates element in the left subtree.\n        // o should have at most one child.\n        var o = d.left\n        // find\n        while (o.right !== null) {\n          o = o.right\n        }\n        // switch\n        d.val = o.val\n        d = o\n      }\n      // d has at most one child\n      // let n be the node that replaces d\n      var isFakeChild\n      var child = d.left || d.right\n      if (child === null) {\n        isFakeChild = true\n        child = new N({id: 0})\n        child.blacken()\n        d.right = child\n      } else {\n        isFakeChild = false\n      }\n\n      if (d.parent === null) {\n        if (!isFakeChild) {\n          this.root = child\n          child.blacken()\n          child._parent = null\n        } else {\n          this.root = null\n        }\n        return\n      } else if (d.parent.left === d) {\n        d.parent.left = child\n      } else if (d.parent.right === d) {\n        d.parent.right = child\n      } else {\n        throw new Error('Impossible!')\n      }\n      if (d.isBlack()) {\n        if (child.isRed()) {\n          child.blacken()\n        } else {\n          this._fixDelete(child)\n        }\n      }\n      this.root.blacken()\n      if (isFakeChild) {\n        if (child.parent.left === child) {\n          child.parent.left = null\n        } else if (child.parent.right === child) {\n          child.parent.right = null\n        } else {\n          throw new Error('Impossible #3')\n        }\n      }\n    }\n    _fixDelete (n) {\n      function isBlack (node) {\n        return node !== null ? node.isBlack() : true\n      }\n      function isRed (node) {\n        return node !== null ? node.isRed() : false\n      }\n      if (n.parent === null) {\n        // this can only be called after the first iteration of fixDelete.\n        return\n      }\n      // d was already replaced by the child\n      // d is not the root\n      // d and child are black\n      var sibling = n.sibling\n      if (isRed(sibling)) {\n        // make sibling the grandfather\n        n.parent.redden()\n        sibling.blacken()\n        if (n === n.parent.left) {\n          n.parent.rotateLeft(this)\n        } else if (n === n.parent.right) {\n          n.parent.rotateRight(this)\n        } else {\n          throw new Error('Impossible #2')\n        }\n        sibling = n.sibling\n      }\n      // parent, sibling, and children of n are black\n      if (n.parent.isBlack() &&\n        sibling.isBlack() &&\n        isBlack(sibling.left) &&\n        isBlack(sibling.right)\n      ) {\n        sibling.redden()\n        this._fixDelete(n.parent)\n      } else if (n.parent.isRed() &&\n        sibling.isBlack() &&\n        isBlack(sibling.left) &&\n        isBlack(sibling.right)\n      ) {\n        sibling.redden()\n        n.parent.blacken()\n      } else {\n        if (n === n.parent.left &&\n          sibling.isBlack() &&\n          isRed(sibling.left) &&\n          isBlack(sibling.right)\n        ) {\n          sibling.redden()\n          sibling.left.blacken()\n          sibling.rotateRight(this)\n          sibling = n.sibling\n        } else if (n === n.parent.right &&\n          sibling.isBlack() &&\n          isRed(sibling.right) &&\n          isBlack(sibling.left)\n        ) {\n          sibling.redden()\n          sibling.right.blacken()\n          sibling.rotateLeft(this)\n          sibling = n.sibling\n        }\n        sibling.color = n.parent.color\n        n.parent.blacken()\n        if (n === n.parent.left) {\n          sibling.right.blacken()\n          n.parent.rotateLeft(this)\n        } else {\n          sibling.left.blacken()\n          n.parent.rotateRight(this)\n        }\n      }\n    }\n    * put (v) {\n      if (v == null || v.id == null || v.id.constructor !== Array) {\n        throw new Error('v is expected to have an id property which is an Array!')\n      }\n      var node = new N(v)\n      if (this.root !== null) {\n        var p = this.root // p abbrev. parent\n        while (true) {\n          if (Y.utils.smaller(node.val.id, p.val.id)) {\n            if (p.left === null) {\n              p.left = node\n              break\n            } else {\n              p = p.left\n            }\n          } else if (Y.utils.smaller(p.val.id, node.val.id)) {\n            if (p.right === null) {\n              p.right = node\n              break\n            } else {\n              p = p.right\n            }\n          } else {\n            p.val = node.val\n            return p\n          }\n        }\n        this._fixInsert(node)\n      } else {\n        this.root = node\n      }\n      this.length++\n      this.root.blacken()\n      return node\n    }\n    _fixInsert (n) {\n      if (n.parent === null) {\n        n.blacken()\n        return\n      } else if (n.parent.isBlack()) {\n        return\n      }\n      var uncle = n.getUncle()\n      if (uncle !== null && uncle.isRed()) {\n        // Note: parent: red, uncle: red\n        n.parent.blacken()\n        uncle.blacken()\n        n.grandparent.redden()\n        this._fixInsert(n.grandparent)\n      } else {\n        // Note: parent: red, uncle: black or null\n        // Now we transform the tree in such a way that\n        // either of these holds:\n        //   1) grandparent.left.isRed\n        //     and grandparent.left.left.isRed\n        //   2) grandparent.right.isRed\n        //     and grandparent.right.right.isRed\n        if (n === n.parent.right && n.parent === n.grandparent.left) {\n          n.parent.rotateLeft(this)\n          // Since we rotated and want to use the previous\n          // cases, we need to set n in such a way that\n          // n.parent.isRed again\n          n = n.left\n        } else if (n === n.parent.left && n.parent === n.grandparent.right) {\n          n.parent.rotateRight(this)\n          // see above\n          n = n.right\n        }\n        // Case 1) or 2) hold from here on.\n        // Now traverse grandparent, make parent a black node\n        // on the highest level which holds two red nodes.\n        n.parent.blacken()\n        n.grandparent.redden()\n        if (n === n.parent.left) {\n          // Case 1\n          n.grandparent.rotateRight(this)\n        } else {\n          // Case 2\n          n.grandparent.rotateLeft(this)\n        }\n      }\n    }\n    * flush () {}\n  }\n\n  Y.utils.RBTree = RBTree\n}\n"],"sourceRoot":"/source/"}